#!/bin/bash
#Script to check dependencies and the corresponding package.
#Only root can run equery
if [ $(whoami) != 'root' ]; then
        echo "Must be root to run $0"
        exit 1;
fi
filename="/tmp/out"
temp="/tmp/temp"
tmp_pack="/tmp/tmp_pack"
declare -a LibrariesArray=()
declare -a TempArray=()
toolchoice="$1"
tool=""
NULL=""
Version="0.1"
MsgVer="depcheck $Version \n
Dependency/Package finder for portage/gentoo.\n
Written by Petross404 (petross404@gmail.com)  \n
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
"
Warning="Warning! This tool is based on ldd. Don't use depcheck or
ldd to figure out the dependencies of a binary you don't trust!
Use objdump -p /path/file or sudo pldd <PID> instead in that case."

#check which tool the user prefers.
if [[ -z "$toolchoice" ]]
then
    echo -e "Please re-run and append output file or tool"
    echo -e ""
    echo -e "Usage: $0 [options] output file..."
    echo -e "options:"
    echo -e ""
    echo -e "--e-file      Use e-file (PFL) to search online"
    echo -e "--equery      Use equery (gentoolkit) to search locally (slow)"
    echo -e "--version     $MsgVer
    "
    echo -e "$Warning"
    exit
fi

if [[ "$1" = "--equery" ]]; then
        option=" b"
        tool="equery$option" 
elif [[ "$1" = "--e-file" ]]; then
        tool="e-file"
elif [[ "$1" = "--version" ]]; then
		echo -e $MsgVer
		exit
elif [[ "$1" = "--warning" ]]; then
		echo -e $Warning
		echo -e "For more info follow this link \n
http://ask.xmodulo.com/check-library-dependency-program-process-linux.html"
		exit
fi

if [[ "$3" != "--quiet" || "$3" != "-q" ]]; then
		echo -e "$Warning"
		echo -e ""
fi

if [[ -x "$2" ]]; then
	echo "File found."
else 
	echo "File not found, not executable or typing error."
	exit 1;
fi

#Keep only the libName.so and not the whole output
ldd "$2" | grep '=' | cut -d'=' -f2 | cut -d'(' -f1 | cut -d'>' -f2-256 > "$filename"
echo -e "\n$2 uses these libraries: "
cat "$filename"
value=`$tool $2` 
echo -e "and the binary belongs to \c"
echo "$value" | [ "$value"=" " ] && echo "$value" || echo 'UKNOWN package'

echo -e "\nWait a minute to process the libraries..."

#Go on and process the entries in the filename
counter=0
while read -r line
do
	lib="$line"
	LibrariesArray["$counter"]="$lib"
	$tool "${LibrariesArray["$counter"]}" > "$temp"
	cat "$temp" > out
	cat out
	let counter="$(( $counter + 1 ))"
done < "$filename"
rm "$filename"
rm out
